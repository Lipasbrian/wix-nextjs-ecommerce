generator client {
  provider   = "prisma-client-js"
  output     = "./generated/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String            @unique
  password      String
  role          Role              @default(USER)
  emailVerified DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  accounts      Account[]
  carts         Cart[]
  orders        Order[]
  sessions      Session[]
  analytics     VendorAnalytics[]
  ads           Ad[]
}

model Ad {
  id             String      @id @default(cuid())
  title          String
  description    String
  image          String?
  targetLocation String
  budget         Float
  status         AdStatus    @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  vendorId       String
  analytics      Analytics[]
  vendor         User        @relation(fields: [vendorId], references: [id])

  @@map("ads")
}

model Analytics {
  id          String   @id @default(cuid())
  adId        String?
  impressions Int      @default(0)
  clicks      Int      @default(0)
  date        DateTime @default(now())
  location    String?
  userId      String
  Ad          Ad?      @relation(fields: [adId], references: [id])

  @@index([userId])
}

model VendorAnalytics {
  id          String   @id @default(cuid())
  vendorId    String
  impressions Int      @default(0)
  clicks      Int      @default(0)
  ctr         Float    @default(0)
  date        DateTime @default(now())
  revenue     Float    @default(0)
  vendor      User     @relation(fields: [vendorId], references: [id])

  @@unique([vendorId, date])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  imageUrl    String?
  CartItem    CartItem[]
  OrderItem   OrderItem[]

  @@index([name])
}

model EmailSubscription {
  id           String   @id @default(cuid())
  email        String   @unique
  subscribedAt DateTime @default(now())
  verified     Boolean  @default(false)
}

model Cart {
  id        String     @id @default(cuid())
  sessionId String?    @unique
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@index([sessionId])
  @@index([userId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([productId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model LoginAttempt {
  id        String   @id @default(cuid())
  ipAddress String
  email     String
  success   Boolean  @default(false)
  userId    String?
  createdAt DateTime @default(now())

  @@index([ipAddress, createdAt])
  @@index([email, createdAt])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  VENDOR
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AdStatus {
  PENDING
  ACTIVE
  PAUSED
  COMPLETED
}
