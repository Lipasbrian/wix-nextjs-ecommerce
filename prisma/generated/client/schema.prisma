// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password      String
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ads           Ad[]
}

model Ad {
  id          String      @id @default(cuid())
  title       String
  description String
  budget      Float
  locations   String[]
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  analytics   Analytics[] @relation("AdToAnalytics")
}

model Analytics {
  id          String   @id @default(cuid())
  adId        String
  impressions Int      @default(0)
  clicks      Int      @default(0)
  date        DateTime @default(now())
  location    String
  ad          Ad       @relation("AdToAnalytics", fields: [adId], references: [id])

  @@index([adId])
}

model VendorAnalytics {
  id          String   @id @default(cuid())
  vendorId    String   @unique
  impressions Int      @default(0)
  clicks      Int      @default(0)
  ctr         Float    @default(0)
  lastUpdated DateTime @default(now()) @updatedAt

  @@index([vendorId])
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  CartItem    CartItem[]

  @@index([name]) // Add index for product search
}

model EmailSubscription {
  id           String   @id @default(cuid())
  email        String   @unique
  subscribedAt DateTime @default(now())
  verified     Boolean  @default(false)
}

model Cart {
  id        String     @id @default(cuid())
  sessionId String?    @unique // For guest shopping
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([sessionId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([productId])
}

model LoginAttempt {
  id        String   @id @default(cuid())
  ipAddress String
  email     String
  createdAt DateTime @default(now())

  @@index([ipAddress, createdAt])
}
model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}